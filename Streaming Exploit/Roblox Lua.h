#pragma once
#include "Includes.h"
#include "GetFieldFix.h"

#define WRITABLE (PAGE_READWRITE | PAGE_WRITECOPY |PAGE_EXECUTE_READWRITE | PAGE_EXECUTE_WRITECOPY)

namespace rl {
	void setJb(DWORD addr) {
		DWORD oldProtection;
		VirtualProtect((LPVOID)addr, 0x05, PAGE_EXECUTE_READWRITE, &oldProtection);
		*(char*)addr = 0xEB;
		VirtualProtect((LPVOID)addr, 0x05, oldProtection, &oldProtection);
	}

	void restoreJb(DWORD addr) {
		DWORD oldProtection;
		VirtualProtect((void*)addr, 5, PAGE_EXECUTE_READWRITE, &oldProtection);
		*(char*)addr = 0x72;
		VirtualProtect((void*)addr, 5, oldProtection, &oldProtection);
	}
	
	void set_jnz(DWORD addr)
	{
		DWORD o_buff;
		VirtualProtect((void*)addr, 5, PAGE_EXECUTE_READWRITE, &o_buff);
		*(char*)addr = 0x75;
		VirtualProtect((void*)addr, 5, o_buff, &o_buff);
	}


	void set_jz(DWORD addr)
	{
		DWORD o_buff;
		VirtualProtect((void*)addr, 5, PAGE_EXECUTE_READWRITE, &o_buff);
		*(char*)addr = 0x74;
		VirtualProtect((void*)addr, 5, o_buff, &o_buff);
	}

	typedef void(__cdecl *Lua_getfield)(int l, int index, const char *k, char a4);
	Lua_getfield lgetfield = (Lua_getfield)getaddy(Watch My Stream To See What This Is!);
	//lua_pcall .text 007575B0 000000C4 00000010 00000010 R . . . B . .
	typedef void(__cdecl *Lua_pushstring)(int luaState, const char *s); //updated
	Lua_pushstring pushstring = (Lua_pushstring)getaddy(Watch My Stream To See What This Is!);

	typedef int(__cdecl *rlpcall)(int luaState, int naArgs, int nresults, int errorFunction);
	rlpcall oldpcall= (rlpcall)Unprotect(aslr(0x728C70));

	DWORD penvbypass = aslr(0x721330);

	int pcall(int naArgs, int nResults, int errorFunction) {
		set_jnz(penvbypass);
		int x = oldpcall(rl::rstate, naArgs, nResults, errorFunction);
		set_jz(penvbypass);
		return x;
	}

	inline void getfieldx(int L, int index, const char* k) {
		try {
			typedef void(__cdecl *lua_getfield)(int, int, const char*);
			((lua_getfield)(GETFIELD_ADDRESS))(L, index, k);
		}
		catch (...) {};
	}

	void getfield(int state, int index, const char *k) {
		setJb((int)lgetfield + 0x74);
		lgetfield(state, index, k, 1);
		restoreJb((int)lgetfield + 0x74);
	}

	void getglobal(int state, const char *k) {
		setJb((int)lgetfield + 0x74);
		lgetfield(state, -10002, k, 1);
		restoreJb((int)lgetfield + 0x74);
	}

	inline void getglobalx(int L, const char* k) {
		try {
			typedef void(__cdecl *rlua_getglobal)(int, int, const char*);
			((rlua_getglobal)(GETFIELD_ADDRESS))(L, -10002, k);
		}
		catch (...) {};
	}
}
